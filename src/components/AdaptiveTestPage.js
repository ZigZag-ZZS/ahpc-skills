// src/components/AdaptiveTestPage.js
import React, { useState, useEffect } from 'react';
import './TestPage.css';
import adaptiveTestingService from '../services/adaptiveTestingService';
import apiService from '../services/apiService';

function AdaptiveTestPage({ onBack }) {
  const [currentQuestion, setCurrentQuestion] = useState(null);
  const [userAnswer, setUserAnswer] = useState(null);
  const [showResults, setShowResults] = useState(false);
  const [showFeedback, setShowFeedback] = useState(false);
  const [feedbackData, setFeedbackData] = useState(null);
  const [testResults, setTestResults] = useState(null);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [testId, setTestId] = useState(null);
  const [userName, setUserName] = useState('');
  const [userRole, setUserRole] = useState('');
  const [profileStep, setProfileStep] = useState(0);

  useEffect(() => {
    const newTestId = apiService.generateTestId();
    setTestId(newTestId);
    adaptiveTestingService.reset();
  }, []);

  const startTest = () => {
    if (profileStep === 0 && userName.trim()) {
      setProfileStep(1);
    } else if (profileStep === 1 && userRole) {
      setProfileStep(2);
      loadNextQuestion();
    }
  };

  const loadNextQuestion = () => {
    const nextQuestion = adaptiveTestingService.getNextQuestion();
    
    if (nextQuestion) {
      setCurrentQuestion(nextQuestion);
      setUserAnswer(null);
      setShowFeedback(false);
    } else {
      finishTest();
    }
  };

  const handleAnswerSubmit = () => {
    if (!userAnswer) return;

    const result = adaptiveTestingService.processAnswer(
      currentQuestion.id,
      userAnswer
    );

    setFeedbackData(result);
    setShowFeedback(true);

    setTimeout(() => {
      loadNextQuestion();
    }, 2000);
  };

  const finishTest = async () => {
    const results = adaptiveTestingService.getFinalResults();
    setTestResults(results);
    
    try {
      await apiService.saveTestResults({
        full_name: userName,
        user_type: userRole,
        test_id: testId,
        test_score: {
          overallScore: results.overallScore,
          totalQuestions: results.totalQuestions,
          correctAnswers: results.correctAnswers,
          competencyResults: results.competencyResults,
          testType: 'adaptive',
          completedAt: new Date().toISOString()
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    }
    
    setShowResults(true);
  };

  const handleSkip = () => {
    adaptiveTestingService.processAnswer(currentQuestion.id, '');
    loadNextQuestion();
  };

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  const progress = adaptiveTestingService.getProgress();

  // –≠–∫—Ä–∞–Ω 1: –í–≤–æ–¥ –∏–º–µ–Ω–∏
  if (profileStep === 0) {
    return (
      <div className="test-page">
        <div className="animated-background">
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="floating-particles">
            {[...Array(10)].map((_, i) => (
              <div key={i} className="particle"></div>
            ))}
          </div>
        </div>

        <nav className="main-nav">
          <div className="nav-brand" onClick={onBack} style={{ cursor: 'pointer' }}>
            <span className="gradient-text">Poly</span>Skills
          </div>
        </nav>

        <div className="test-container">
          <div className="question-card" style={{ maxWidth: '600px', margin: '0 auto' }}>
            <h2 className="question-text" style={{ marginBottom: '1rem' }}>
              üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
            </h2>
            <p style={{ color: 'rgba(255, 255, 255, 0.7)', marginBottom: '2rem', fontSize: '1.1rem' }}>
              –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            </p>
            
            <div style={{ marginBottom: '2rem' }}>
              <label style={{ 
                display: 'block', 
                color: 'white', 
                marginBottom: '0.5rem',
                fontSize: '1rem',
                fontWeight: '600'
              }}>
                –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?
              </label>
              <input
                type="text"
                className="text-input"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                value={userName}
                onChange={(e) => setUserName(e.target.value)}
                style={{ 
                  width: '100%',
                  padding: '1rem 1.5rem',
                  fontSize: '1.1rem',
                  marginBottom: '0.5rem'
                }}
                onKeyPress={(e) => e.key === 'Enter' && userName.trim() && startTest()}
              />
              <div className="text-hint">
                üí° –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
              </div>
            </div>

            <button
              className="nav-btn primary"
              onClick={startTest}
              disabled={!userName.trim()}
              style={{ width: '100%' }}
            >
              –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Üí
            </button>
          </div>
        </div>
      </div>
    );
  }

  // –≠–∫—Ä–∞–Ω 2: –í—ã–±–æ—Ä —Ä–æ–ª–∏
  if (profileStep === 1) {
    return (
      <div className="test-page">
        <div className="animated-background">
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="floating-particles">
            {[...Array(10)].map((_, i) => (
              <div key={i} className="particle"></div>
            ))}
          </div>
        </div>

        <nav className="main-nav">
          <div className="nav-brand" onClick={onBack} style={{ cursor: 'pointer' }}>
            <span className="gradient-text">Poly</span>Skills
          </div>
        </nav>

        <div className="test-container">
          <div className="question-card" style={{ maxWidth: '600px', margin: '0 auto' }}>
            <h2 className="question-text" style={{ marginBottom: '1rem' }}>
              –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {userName}! üëã
            </h2>
            <p style={{ color: 'rgba(255, 255, 255, 0.7)', marginBottom: '2rem', fontSize: '1.1rem' }}>
              –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            </p>

            <div style={{ display: 'grid', gap: '1rem', marginBottom: '2rem' }}>
              <button
                className={`option-btn ${userRole === '–°—Ç—É–¥–µ–Ω—Ç' ? 'active' : ''}`}
                onClick={() => setUserRole('–°—Ç—É–¥–µ–Ω—Ç')}
                style={{ width: '100%', textAlign: 'left' }}
              >
                <span className="option-check">‚úì</span>
                <div>
                  <div style={{ fontSize: '1.2rem', fontWeight: '600', marginBottom: '0.3rem' }}>
                    üéì –°—Ç—É–¥–µ–Ω—Ç
                  </div>
                  <div style={{ fontSize: '0.9rem', opacity: 0.7 }}>
                    –Ø —É—á—É—Å—å –∏ —Ö–æ—á—É –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏
                  </div>
                </div>
              </button>

              <button
                className={`option-btn ${userRole === '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å' ? 'active' : ''}`}
                onClick={() => setUserRole('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')}
                style={{ width: '100%', textAlign: 'left' }}
              >
                <span className="option-check">‚úì</span>
                <div>
                  <div style={{ fontSize: '1.2rem', fontWeight: '600', marginBottom: '0.3rem' }}>
                    üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
                  </div>
                  <div style={{ fontSize: '0.9rem', opacity: 0.7 }}>
                    –Ø –ø—Ä–µ–ø–æ–¥–∞—é –∏ —Ö–æ—á—É –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è
                  </div>
                </div>
              </button>
            </div>

            <div style={{ display: 'flex', gap: '1rem' }}>
              <button
                className="nav-btn secondary"
                onClick={() => setProfileStep(0)}
                style={{ flex: 1 }}
              >
                ‚Üê –ù–∞–∑–∞–¥
              </button>
              <button
                className="nav-btn primary"
                onClick={startTest}
                disabled={!userRole}
                style={{ flex: 2 }}
              >
                –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üöÄ
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // –≠–∫—Ä–∞–Ω 3: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  if (showResults && testResults) {
    return (
      <div className="test-page">
        <div className="animated-background">
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="floating-particles">
            {[...Array(10)].map((_, i) => (
              <div key={i} className="particle"></div>
            ))}
          </div>
        </div>

        <nav className="main-nav">
          <div className="nav-brand" onClick={onBack} style={{ cursor: 'pointer' }}>
            <span className="gradient-text">Poly</span>Skills
          </div>
          <button className="mobile-menu-btn" onClick={toggleMenu}>
            {isMenuOpen ? '‚úï' : '‚ò∞'}
          </button>
          <div className={`nav-links ${isMenuOpen ? 'active' : ''}`}>
            <a href="#stats" onClick={() => setIsMenuOpen(false)}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
            <a href="#courses" onClick={() => setIsMenuOpen(false)}>–ö—É—Ä—Å—ã</a>
            <a href="#login" className="login-btn" onClick={() => setIsMenuOpen(false)}>–í–æ–π—Ç–∏</a>
          </div>
        </nav>

        <div className="results-container">
          <div className="results-header">
            <div className="success-icon">‚úì</div>
            <h1>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, {userName}!</h1>
            <p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤—ã</p>
          </div>

          <div className="results-stats">
            <div className="result-card">
              <div className="result-icon">üéØ</div>
              <h3>–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</h3>
              <div className="result-value">{testResults.overallScore}%</div>
              <p>{testResults.correctAnswers} –∏–∑ {testResults.totalQuestions} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö</p>
            </div>
            <div className="result-card">
              <div className="result-icon">üìä</div>
              <h3>–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –æ—Ü–µ–Ω–µ–Ω–æ</h3>
              <div className="result-value">
                {Object.keys(testResults.competencyResults).filter(
                  k => testResults.competencyResults[k].questionsAsked > 0
                ).length}
              </div>
              <p>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤</p>
            </div>
            <div className="result-card">
              <div className="result-icon">üöÄ</div>
              <h3>–†–æ–ª—å</h3>
              <div className="result-value" style={{ fontSize: '1.8rem' }}>{userRole}</div>
              <p>–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å</p>
            </div>
          </div>

          <div className="result-card" style={{ marginBottom: '2rem', textAlign: 'left' }}>
            <h3 style={{ color: 'white', marginBottom: '1.5rem', fontSize: '1.8rem', textAlign: 'center' }}>
              üìà –í–∞—à–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
            </h3>
            <div style={{ display: 'grid', gap: '1rem' }}>
              {Object.entries(testResults.competencyResults)
                .filter(([_, data]) => data.questionsAsked > 0)
                .map(([competency, data]) => (
                  <div
                    key={competency}
                    style={{
                      background: 'rgba(59, 130, 246, 0.1)',
                      padding: '1.5rem',
                      borderRadius: '12px',
                      border: '1px solid rgba(59, 130, 246, 0.3)'
                    }}
                  >
                    <div style={{ 
                      display: 'flex', 
                      justifyContent: 'space-between', 
                      alignItems: 'center',
                      marginBottom: '1rem'
                    }}>
                      <h4 style={{ color: 'white', fontSize: '1.2rem', margin: 0 }}>
                        {competency}
                      </h4>
                      <span style={{
                        background: data.level === '–≠–∫—Å–ø–µ—Ä—Ç' ? '#10b981' :
                                   data.level === '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π' ? '#3b82f6' :
                                   data.level === '–°—Ä–µ–¥–Ω–∏–π' ? '#f59e0b' : '#6b7280',
                        color: 'white',
                        padding: '0.5rem 1rem',
                        borderRadius: '50px',
                        fontSize: '0.9rem',
                        fontWeight: '600'
                      }}>
                        {data.level}
                      </span>
                    </div>
                    
                    <div style={{ marginBottom: '0.8rem' }}>
                      <div style={{
                        display: 'flex',
                        justifyContent: 'space-between',
                        color: 'rgba(255, 255, 255, 0.7)',
                        fontSize: '0.9rem',
                        marginBottom: '0.5rem'
                      }}>
                        <span>–¢–æ—á–Ω–æ—Å—Ç—å</span>
                        <span>{data.score}%</span>
                      </div>
                      <div style={{
                        width: '100%',
                        height: '8px',
                        background: 'rgba(59, 130, 246, 0.2)',
                        borderRadius: '50px',
                        overflow: 'hidden'
                      }}>
                        <div style={{
                          width: `${data.score}%`,
                          height: '100%',
                          background: 'linear-gradient(90deg, #3b82f6, #0ea5e9)',
                          borderRadius: '50px',
                          transition: 'width 1s ease'
                        }}></div>
                      </div>
                    </div>

                    <div style={{
                      display: 'flex',
                      flexWrap: 'wrap',
                      gap: '1rem',
                      color: 'rgba(255, 255, 255, 0.6)',
                      fontSize: '0.9rem'
                    }}>
                      <span>üìù –í–æ–ø—Ä–æ—Å–æ–≤: {data.questionsAsked}</span>
                      <span>‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {data.correctAnswers}</span>
                      <span>‚ö° –°–ª–æ–∂–Ω–æ—Å—Ç—å: {
                        data.difficulty === 'expert' ? '–≠–∫—Å–ø–µ—Ä—Ç' :
                        data.difficulty === 'intermediate' ? '–°—Ä–µ–¥–Ω–∏–π' : '–ù–∞—á–∞–ª—å–Ω—ã–π'
                      }</span>
                    </div>
                  </div>
                ))}
            </div>
          </div>

          <div className="result-card" style={{ marginBottom: '2rem', textAlign: 'left' }}>
            <h3 style={{ color: 'white', marginBottom: '1.5rem', fontSize: '1.5rem' }}>
              üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {userRole === '–°—Ç—É–¥–µ–Ω—Ç' ? '—Å—Ç—É–¥–µ–Ω—Ç–∞' : userRole === '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å' ? '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è' : '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞'}
            </h3>
            <div style={{ color: 'rgba(255, 255, 255, 0.8)', lineHeight: '1.8' }}>
              {userRole === '–°—Ç—É–¥–µ–Ω—Ç' ? (
                <>
                  <p style={{ marginBottom: '1rem' }}>
                    –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º:
                  </p>
                  <ul style={{ paddingLeft: '1.5rem' }}>
                    <li>–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π —Å –Ω–∏–∑–∫–∏–º —É—Ä–æ–≤–Ω–µ–º</li>
                    <li>–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö</li>
                    <li>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —É—á–µ–±–Ω—ã–º –≥—Ä—É–ø–ø–∞–º –∏ —Ö–∞–∫–∞—Ç–æ–Ω–∞–º</li>
                    <li>–†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</li>
                  </ul>
                </>
              ) : userRole === '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å' ? (
                <>
                  <p style={{ marginBottom: '1rem' }}>
                    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è:
                  </p>
                  <ul style={{ paddingLeft: '1.5rem' }}>
                    <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</li>
                    <li>–ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–¥ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–∞–±—ã–µ –∑–æ–Ω—ã</li>
                    <li>–í–Ω–µ–¥—Ä—è–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—É—á–µ–Ω–∏—è</li>
                    <li>–†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</li>
                  </ul>
                </>
              ) : (
                <>
                  <p style={{ marginBottom: '1rem' }}>
                    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è:
                  </p>
                  <ul style={{ paddingLeft: '1.5rem' }}>
                    <li>–£–≥–ª—É–±–∏—Ç–µ –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç—è—Ö —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏</li>
                    <li>–ü—Ä–æ–π–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ —Å–ª–∞–±—ã–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º</li>
                    <li>–î–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ</li>
                    <li>–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç—Ä–µ–Ω–¥–∞–º–∏ –≤ –≤–∞—à–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏</li>
                  </ul>
                </>
              )}
            </div>
          </div>

          <div className="results-actions">
            <button className="primary-btn" onClick={() => {
              adaptiveTestingService.reset();
              setShowResults(false);
              setProfileStep(0);
              setUserName('');
              setUserRole('');
              setCurrentQuestion(null);
            }}>
              –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ
            </button>
            <button className="secondary-btn" onClick={onBack}>
              –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            </button>
          </div>
        </div>
      </div>
    );
  }

  // –≠–∫—Ä–∞–Ω 4: –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
  if (!currentQuestion) {
    return (
      <div className="test-page">
        <div className="animated-background">
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="floating-particles">
            {[...Array(10)].map((_, i) => (
              <div key={i} className="particle"></div>
            ))}
          </div>
        </div>

        <nav className="main-nav">
          <div className="nav-brand" onClick={onBack} style={{ cursor: 'pointer' }}>
            <span className="gradient-text">Poly</span>Skills
          </div>
        </nav>

        <div className="test-container">
          <div className="question-card" style={{ textAlign: 'center' }}>
            <h2 className="question-text">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞...</h2>
            <p style={{ color: 'rgba(255, 255, 255, 0.7)', fontSize: '1.2rem', marginTop: '2rem' }}>
              ü§ñ –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å
            </p>
          </div>
        </div>
      </div>
    );
  }

  // –≠–∫—Ä–∞–Ω 5: –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  return (
    <div className="test-page">
      <div className="animated-background">
        <div className="wave"></div>
        <div className="wave"></div>
        <div className="wave"></div>
        <div className="floating-particles">
          {[...Array(10)].map((_, i) => (
            <div key={i} className="particle"></div>
          ))}
        </div>
      </div>

      <nav className="main-nav">
        <div className="nav-brand" onClick={onBack} style={{ cursor: 'pointer' }}>
          <span className="gradient-text">Poly</span>Skills
        </div>
        <button className="mobile-menu-btn" onClick={toggleMenu}>
          {isMenuOpen ? '‚úï' : '‚ò∞'}
        </button>
        <div className={`nav-links ${isMenuOpen ? 'active' : ''}`}>
          <a href="#stats" onClick={() => setIsMenuOpen(false)}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
          <a href="#courses" onClick={() => setIsMenuOpen(false)}>–ö—É—Ä—Å—ã</a>
          <a href="#login" className="login-btn" onClick={() => setIsMenuOpen(false)}>–í–æ–π—Ç–∏</a>
        </div>
      </nav>

      <div className="test-container">
        <div className="test-header">
          <button className="back-to-home" onClick={onBack}>
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
          <div className="progress-info">
            <span className="question-counter">
              –í–æ–ø—Ä–æ—Å {progress.current} –∏–∑ {progress.total}
            </span>
            <span className="category-badge">
              {currentQuestion.competency} ‚Ä¢ {
                currentQuestion.difficulty === 'expert' ? 'üî• –≠–∫—Å–ø–µ—Ä—Ç' :
                currentQuestion.difficulty === 'intermediate' ? '‚ö° –°—Ä–µ–¥–Ω–∏–π' : 'üå± –ù–∞—á–∞–ª—å–Ω—ã–π'
              }
            </span>
          </div>
          <div className="progress-bar">
            <div className="progress-fill" style={{ width: `${progress.percentage}%` }}></div>
          </div>
        </div>

        <div className="question-card">
          <h2 className="question-text">{currentQuestion.question}</h2>

          {showFeedback && feedbackData && (
            <div style={{
              background: feedbackData.isCorrect 
                ? 'rgba(16, 185, 129, 0.2)' 
                : 'rgba(239, 68, 68, 0.2)',
              border: `2px solid ${feedbackData.isCorrect ? '#10b981' : '#ef4444'}`,
              borderRadius: '12px',
              padding: '1.5rem',
              marginBottom: '2rem',
              animation: 'cardAppear 0.3s ease-out'
            }}>
              <div style={{ 
                color: 'white', 
                fontSize: '1.2rem', 
                fontWeight: '600',
                marginBottom: '0.5rem'
              }}>
                {feedbackData.feedback}
              </div>
              {!feedbackData.isCorrect && feedbackData.correctAnswer && (
                <div style={{ color: 'rgba(255, 255, 255, 0.8)', fontSize: '1rem' }}>
                  –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {feedbackData.correctAnswer}
                </div>
              )}
            </div>
          )}

          <div className="answer-section">
            {currentQuestion.type === 'rating' && (
              <div className="rating-container">
                {[1, 2, 3, 4, 5].map((rating) => (
                  <button
                    key={rating}
                    className={`rating-btn ${userAnswer === rating ? 'active' : ''}`}
                    onClick={() => setUserAnswer(rating)}
                    disabled={showFeedback}
                  >
                    <span className="rating-number">{rating}</span>
                    <span className="rating-label">
                      {rating === 1 && '–ù–æ–≤–∏—á–æ–∫'}
                      {rating === 2 && '–ë–∞–∑–æ–≤—ã–π'}
                      {rating === 3 && '–°—Ä–µ–¥–Ω–∏–π'}
                      {rating === 4 && '–•–æ—Ä–æ—à–∏–π'}
                      {rating === 5 && '–û—Ç–ª–∏—á–Ω—ã–π'}
                    </span>
                  </button>
                ))}
              </div>
            )}

            {currentQuestion.type === 'multiple' && currentQuestion.options && (
              <div className="multiple-container">
                {currentQuestion.options.map((option) => (
                  <button
                    key={option}
                    className={`option-btn ${userAnswer === option ? 'active' : ''}`}
                    onClick={() => setUserAnswer(option)}
                    disabled={showFeedback}
                  >
                    <span className="option-check">‚úì</span>
                    {option}
                  </button>
                ))}
              </div>
            )}

            {currentQuestion.type === 'text' && (
              <div className="text-container">
                <textarea
                  className="text-input"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç..."
                  value={userAnswer || ''}
                  onChange={(e) => setUserAnswer(e.target.value)}
                  rows={6}
                  disabled={showFeedback}
                />
                {currentQuestion.hint && (
                  <div className="text-hint">
                    üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {currentQuestion.hint}
                  </div>
                )}
                <div className="text-hint">
                  –ú–∏–Ω–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∑–∞—Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                </div>
              </div>
            )}
          </div>

          {!showFeedback && (
            <div className="navigation-buttons">
              <button
                className="nav-btn secondary"
                onClick={handleSkip}
              >
                –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
              </button>
              <button
                className="nav-btn primary"
                onClick={handleAnswerSubmit}
                disabled={!userAnswer || (
                  currentQuestion.type === 'text' && 
                  userAnswer && 
                  userAnswer.trim().length < 30
                )}
              >
                –û—Ç–≤–µ—Ç–∏—Ç—å ‚Üí
              </button>
            </div>
          )}

          {showFeedback && (
            <div style={{ textAlign: 'center', color: 'rgba(255, 255, 255, 0.7)' }}>
              –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É...
            </div>
          )}
        </div>

        <div className="test-footer">
          <p className="footer-text">
            üß† –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
          </p>
        </div>
      </div>
    </div>
  );
}

export default AdaptiveTestPage;