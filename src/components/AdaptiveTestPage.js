// src/components/AdaptiveTestPage.js
import React, { useState, useEffect } from 'react';
import './TestPage.css';
import adaptiveTestingService from '../services/adaptiveTestingService';
import apiService from '../services/apiService';

function AdaptiveTestPage({ onBack }) {
  const [currentQuestion, setCurrentQuestion] = useState(null);
  const [userAnswer, setUserAnswer] = useState(null);
  const [showResults, setShowResults] = useState(false);
  const [showFeedback, setShowFeedback] = useState(false);
  const [feedbackData, setFeedbackData] = useState(null);
  const [testResults, setTestResults] = useState(null);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [testId, setTestId] = useState(null);
  const [userName, setUserName] = useState('');
  const [userRole, setUserRole] = useState('');
  const [selectedCompetencies, setSelectedCompetencies] = useState([]);
  const [profileStep, setProfileStep] = useState(0);

  // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
  const availableCompetencies = [
    { id: 'graphic_design', name: 'üé® –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω', description: '–†–∞–±–æ—Ç–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, UI/UX –¥–∏–∑–∞–π–Ω' },
    { id: 'system_admin', name: '‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤, —Å–µ—Ç–∏, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å' },
    { id: 'web_dev', name: 'üåê –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', description: 'Frontend –∏ Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞' },
    { id: 'mobile_dev', name: 'üì± –ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', description: 'iOS, Android, –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' },
    { id: 'data_science', name: 'üìä Data Science', description: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, ML, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è' },
    { id: 'devops', name: 'üîß DevOps', description: 'CI/CD, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è' },
    { id: 'project_management', name: 'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏', description: 'Agile, Scrum, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ' },
    { id: 'cybersecurity', name: 'üõ°Ô∏è –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', description: '–ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥' },
    { id: 'cloud_computing', name: '‚òÅÔ∏è –û–±–ª–∞—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', description: 'AWS, Azure, Google Cloud' },
    { id: 'programming', name: 'üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', description: '–ê–ª–≥–æ—Ä–∏—Ç–º—ã, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö' }
  ];

  useEffect(() => {
    const newTestId = apiService.generateTestId();
    setTestId(newTestId);
    adaptiveTestingService.reset();
  }, []);

  const startTest = () => {
    if (profileStep === 0 && userName.trim()) {
      setProfileStep(1);
    } else if (profileStep === 1 && userRole) {
      setProfileStep(2);
    } else if (profileStep === 2 && selectedCompetencies.length > 0) {
      setProfileStep(3);
      adaptiveTestingService.setSelectedCompetencies(selectedCompetencies);
      loadNextQuestion();
    }
  };

  const toggleCompetency = (competencyId) => {
    setSelectedCompetencies(prev => 
      prev.includes(competencyId) 
        ? prev.filter(id => id !== competencyId)
        : [...prev, competencyId]
    );
  };

  const loadNextQuestion = () => {
    const nextQuestion = adaptiveTestingService.getNextQuestion();
    
    if (nextQuestion) {
      setCurrentQuestion(nextQuestion);
      setUserAnswer(null);
      setShowFeedback(false);
    } else {
      finishTest();
    }
  };

  const handleAnswerSubmit = () => {
    if (!userAnswer) return;

    const result = adaptiveTestingService.processAnswer(
      currentQuestion.id,
      userAnswer
    );

    setFeedbackData(result);
    setShowFeedback(true);

    setTimeout(() => {
      loadNextQuestion();
    }, 2000);
  };

  const finishTest = async () => {
    const results = adaptiveTestingService.getFinalResults();
    setTestResults(results);
    
    try {
      await apiService.saveTestResults({
        full_name: userName,
        user_type: userRole,
        test_id: testId,
        selected_competencies: selectedCompetencies,
        test_score: {
          overallScore: results.overallScore,
          totalQuestions: results.totalQuestions,
          correctAnswers: results.correctAnswers,
          competencyResults: results.competencyResults,
          testType: 'adaptive',
          completedAt: new Date().toISOString()
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    }
    
    setShowResults(true);
  };

  const handleSkip = () => {
    adaptiveTestingService.processAnswer(currentQuestion.id, '');
    loadNextQuestion();
  };

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  const progress = adaptiveTestingService.getProgress();

  // –≠–∫—Ä–∞–Ω 1: –í–≤–æ–¥ –∏–º–µ–Ω–∏
  if (profileStep === 0) {
    return (
      <div className="test-page">
        <div className="animated-background">
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="floating-particles">
            {[...Array(10)].map((_, i) => (
              <div key={i} className="particle"></div>
            ))}
          </div>
        </div>

        <nav className="main-nav">
          <div className="nav-brand" onClick={onBack} style={{ cursor: 'pointer' }}>
            <span className="gradient-text">Poly</span>Skills
          </div>
        </nav>

        <div className="test-container">
          <div className="question-card" style={{ maxWidth: '600px', margin: '0 auto' }}>
            <h2 className="question-text" style={{ marginBottom: '1rem' }}>
              üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!
            </h2>
            <p style={{ color: 'rgba(255, 255, 255, 0.7)', marginBottom: '2rem', fontSize: '1.1rem' }}>
              –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∏—Ç –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –ø–æ 100-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ –∏ –ø–æ–¥–±–µ—Ä–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∑–Ω–∞–Ω–∏–π
            </p>
            
            <div style={{ marginBottom: '2rem' }}>
              <label style={{ 
                display: 'block', 
                color: 'white', 
                marginBottom: '0.5rem',
                fontSize: '1rem',
                fontWeight: '600'
              }}>
                –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?
              </label>
              <input
                type="text"
                className="text-input"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                value={userName}
                onChange={(e) => setUserName(e.target.value)}
                style={{ 
                  width: '100%',
                  padding: '1rem 1.5rem',
                  fontSize: '1.1rem',
                  marginBottom: '0.5rem'
                }}
                onKeyPress={(e) => e.key === 'Enter' && userName.trim() && startTest()}
              />
              <div className="text-hint">
                üí° –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
              </div>
            </div>

            <button
              className="nav-btn primary"
              onClick={startTest}
              disabled={!userName.trim()}
              style={{ width: '100%' }}
            >
              –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Üí
            </button>
          </div>
        </div>
      </div>
    );
  }

// –≠–∫—Ä–∞–Ω 2: –í—ã–±–æ—Ä —Ä–æ–ª–∏
if (profileStep === 1) {
  return (
    <div className="test-page">
      <div className="animated-background">
        <div className="wave"></div>
        <div className="wave"></div>
        <div className="wave"></div>
        <div className="floating-particles">
          {[...Array(10)].map((_, i) => (
            <div key={i} className="particle"></div>
          ))}
        </div>
      </div>

      <nav className="main-nav">
        <div className="nav-brand" onClick={onBack} style={{ cursor: 'pointer' }}>
          <span className="gradient-text">Poly</span>Skills
        </div>
      </nav>

      <div className="test-container">
        <div className="question-card" style={{ maxWidth: '600px', margin: '0 auto' }}>
          <h2 className="question-text" style={{ marginBottom: '1rem' }}>
            –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {userName}! üëã
          </h2>
          <p style={{ color: 'rgba(255, 255, 255, 0.7)', marginBottom: '2rem', fontSize: '1.1rem' }}>
            –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          </p>

          <div style={{ display: 'grid', gap: '1rem', marginBottom: '2rem' }}>
            <button
              className={`option-btn ${userRole === '–°—Ç—É–¥–µ–Ω—Ç' ? 'active' : ''}`}
              onClick={() => setUserRole('–°—Ç—É–¥–µ–Ω—Ç')}
              style={{ width: '100%', textAlign: 'left' }}
            >
              <span className="option-check">‚úì</span>
              <div>
                <div style={{ fontSize: '1.2rem', fontWeight: '600', marginBottom: '0.3rem' }}>
                  üéì –°—Ç—É–¥–µ–Ω—Ç
                </div>
                <div style={{ fontSize: '0.9rem', opacity: 0.7 }}>
                  –Ø —É—á—É—Å—å –∏ —Ö–æ—á—É –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏
                </div>
              </div>
            </button>

            <button
              className={`option-btn ${userRole === '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å' ? 'active' : ''}`}
              onClick={() => setUserRole('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')}
              style={{ width: '100%', textAlign: 'left' }}
            >
              <span className="option-check">‚úì</span>
              <div>
                <div style={{ fontSize: '1.2rem', fontWeight: '600', marginBottom: '0.3rem' }}>
                  üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
                </div>
                <div style={{ fontSize: '0.9rem', opacity: 0.7 }}>
                  –Ø –ø—Ä–µ–ø–æ–¥–∞—é –∏ —Ö–æ—á—É –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è
                </div>
              </div>
            </button>
          </div>

          <div style={{ display: 'flex', gap: '1rem' }}>
            <button
              className="nav-btn secondary"
              onClick={() => setProfileStep(0)}
              style={{ flex: 1 }}
            >
              ‚Üê –ù–∞–∑–∞–¥
            </button>
            <button
              className="nav-btn primary"
              onClick={startTest}
              disabled={!userRole}
              style={{ flex: 2 }}
            >
              –î–∞–ª–µ–µ ‚Üí
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

  // –≠–∫—Ä–∞–Ω 3: –í—ã–±–æ—Ä –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
  if (profileStep === 2) {
    return (
      <div className="test-page">
        <div className="animated-background">
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="floating-particles">
            {[...Array(10)].map((_, i) => (
              <div key={i} className="particle"></div>
            ))}
          </div>
        </div>

        <nav className="main-nav">
          <div className="nav-brand" onClick={onBack} style={{ cursor: 'pointer' }}>
            <span className="gradient-text">Poly</span>Skills
          </div>
        </nav>

        <div className="test-container">
          <div className="question-card" style={{ maxWidth: '800px', margin: '0 auto' }}>
            <h2 className="question-text" style={{ marginBottom: '1rem' }}>
              üéØ –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            </h2>
            <p style={{ color: 'rgba(255, 255, 255, 0.7)', marginBottom: '2rem', fontSize: '1.1rem' }}>
              –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ 2-5 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
            </p>

            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
              gap: '1rem',
              marginBottom: '2rem'
            }}>
              {availableCompetencies.map(comp => (
                <button
                  key={comp.id}
                  className={`option-btn ${selectedCompetencies.includes(comp.id) ? 'active' : ''}`}
                  onClick={() => toggleCompetency(comp.id)}
                  style={{ 
                    width: '100%', 
                    textAlign: 'left',
                    height: 'auto',
                    padding: '1.5rem'
                  }}
                >
                  <span className="option-check">‚úì</span>
                  <div>
                    <div style={{ fontSize: '1.1rem', fontWeight: '600', marginBottom: '0.5rem' }}>
                      {comp.name}
                    </div>
                    <div style={{ fontSize: '0.9rem', opacity: 0.7, lineHeight: '1.4' }}>
                      {comp.description}
                    </div>
                  </div>
                </button>
              ))}
            </div>

            <div style={{ 
              background: 'rgba(59, 130, 246, 0.1)', 
              padding: '1rem', 
              borderRadius: '8px',
              marginBottom: '2rem',
              border: '1px solid rgba(59, 130, 246, 0.3)'
            }}>
              <div style={{ color: 'white', fontSize: '0.9rem' }}>
                <strong>‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</strong>
                <ul style={{ margin: '0.5rem 0 0 1rem', padding: 0 }}>
                  <li>–ù–∞—á–∏–Ω–∞–µ—Ç —Å–æ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</li>
                  <li>–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤</li>
                  <li>–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞–∂–¥—É—é –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é –ø–æ 100-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ</li>
                  <li>–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –æ—Ç –ù–æ–≤–∏—á–∫–∞ –¥–æ –≠–∫—Å–ø–µ—Ä—Ç–∞</li>
                </ul>
              </div>
            </div>

            <div style={{ display: 'flex', gap: '1rem' }}>
              <button
                className="nav-btn secondary"
                onClick={() => setProfileStep(1)}
                style={{ flex: 1 }}
              >
                ‚Üê –ù–∞–∑–∞–¥
              </button>
              <button
                className="nav-btn primary"
                onClick={startTest}
                disabled={selectedCompetencies.length === 0}
                style={{ flex: 2 }}
              >
                –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üöÄ
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

// –≠–∫—Ä–∞–Ω 4: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
if (showResults && testResults) {
  return (
    <div className="test-page">
      <div className="animated-background">
        <div className="wave"></div>
        <div className="wave"></div>
        <div className="wave"></div>
        <div className="floating-particles">
          {[...Array(10)].map((_, i) => (
            <div key={i} className="particle"></div>
          ))}
        </div>
      </div>

      <nav className="main-nav">
        <div className="nav-brand" onClick={onBack} style={{ cursor: 'pointer' }}>
          <span className="gradient-text">Poly</span>Skills
        </div>
        <button className="mobile-menu-btn" onClick={toggleMenu}>
          {isMenuOpen ? '‚úï' : '‚ò∞'}
        </button>
        <div className={`nav-links ${isMenuOpen ? 'active' : ''}`}>
          <a href="#stats" onClick={() => setIsMenuOpen(false)}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
          <a href="#courses" onClick={() => setIsMenuOpen(false)}>–ö—É—Ä—Å—ã</a>
          <a href="#login" className="login-btn" onClick={() => setIsMenuOpen(false)}>–í–æ–π—Ç–∏</a>
        </div>
      </nav>

      <div className="results-container">
        <div className="results-header">
          <div className="success-icon">üéì</div>
          <h1>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {userName}!</h1>
          <p>–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã</p>
          <div style={{
            marginTop: '1rem',
            padding: '0.8rem 1.5rem',
            background: 'rgba(59, 130, 246, 0.2)',
            borderRadius: '50px',
            border: '1px solid rgba(59, 130, 246, 0.4)',
            fontSize: '0.9rem',
            color: 'white'
          }}>
            {userRole === '–°—Ç—É–¥–µ–Ω—Ç' ? 'üéí –°—Ç—É–¥–µ–Ω—Ç' : 'üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'} ‚Ä¢ {selectedCompetencies.length} –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
          </div>
        </div>

        <div className="results-stats">
          <div className="result-card" style={{background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'}}>
            <div className="result-icon">üìä</div>
            <h3>–û–±—â–∏–π –±–∞–ª–ª</h3>
            <div className="result-value" style={{ fontSize: '3rem', margin: '1rem 0' }}>
              {testResults.overallScore}
              <span style={{ fontSize: '1.5rem', opacity: 0.8 }}>/100</span>
            </div>
            <div style={{
              width: '80px',
              height: '80px',
              margin: '0 auto',
              borderRadius: '50%',
              background: `conic-gradient(#10b981 ${testResults.overallScore * 3.6}deg, rgba(255,255,255,0.1) 0deg)`,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              position: 'relative'
            }}>
              <div style={{
                width: '60px',
                height: '60px',
                background: 'rgba(16, 185, 129, 0.9)',
                borderRadius: '50%',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                color: 'white',
                fontWeight: 'bold',
                fontSize: '1.2rem'
              }}>
                {Math.round(testResults.overallScore)}%
              </div>
            </div>
            <p style={{ marginTop: '1rem', fontSize: '0.9rem' }}>
              –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –≤—Å–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
            </p>
          </div>

          <div className="result-card" style={{background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)'}}>
            <div className="result-icon">‚úÖ</div>
            <h3>–¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤</h3>
            <div className="result-value" style={{ fontSize: '2.5rem', margin: '1rem 0' }}>
              {Math.round((testResults.correctAnswers / testResults.totalQuestions) * 100)}%
            </div>
            <div style={{ 
              display: 'flex', 
              justifyContent: 'space-between',
              alignItems: 'center',
              margin: '1rem 0',
              padding: '0 1rem'
            }}>
              <span style={{ fontSize: '1.2rem', fontWeight: 'bold' }}>
                {testResults.correctAnswers}
              </span>
              <span style={{ opacity: 0.7 }}>–∏–∑</span>
              <span style={{ fontSize: '1.2rem', fontWeight: 'bold' }}>
                {testResults.totalQuestions}
              </span>
            </div>
            <p>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</p>
          </div>

          <div className="result-card" style={{background: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)'}}>
            <div className="result-icon">üéØ</div>
            <h3>–û—Ü–µ–Ω–µ–Ω–æ –Ω–∞–≤—ã–∫–æ–≤</h3>
            <div className="result-value" style={{ fontSize: '3rem', margin: '1rem 0' }}>
              {Object.keys(testResults.competencyResults).length}
            </div>
            <div style={{
              display: 'flex',
              flexWrap: 'wrap',
              gap: '0.3rem',
              justifyContent: 'center',
              margin: '1rem 0'
            }}>
              {selectedCompetencies.slice(0, 4).map(compId => {
                const comp = availableCompetencies.find(c => c.id === compId);
                return comp ? (
                  <span key={compId} style={{
                    background: 'rgba(255, 255, 255, 0.2)',
                    color: 'white',
                    padding: '0.2rem 0.6rem',
                    borderRadius: '12px',
                    fontSize: '0.7rem',
                    border: '1px solid rgba(255, 255, 255, 0.3)'
                  }}>
                    {comp.name.split(' ')[0]}
                  </span>
                ) : null;
              })}
              {selectedCompetencies.length > 4 && (
                <span style={{
                  background: 'rgba(255, 255, 255, 0.2)',
                  color: 'white',
                  padding: '0.2rem 0.6rem',
                  borderRadius: '12px',
                  fontSize: '0.7rem'
                }}>
                  +{selectedCompetencies.length - 4}
                </span>
              )}
            </div>
            <p>–û–±–ª–∞—Å—Ç–µ–π –∑–Ω–∞–Ω–∏–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ</p>
          </div>
        </div>

        <div className="result-card" style={{ 
          marginBottom: '2rem', 
          textAlign: 'left',
          background: 'rgba(17, 25, 40, 0.8)',
          backdropFilter: 'blur(10px)'
        }}>
          <h3 style={{ 
            color: 'white', 
            marginBottom: '2rem', 
            fontSize: '1.8rem', 
            textAlign: 'center',
            background: 'linear-gradient(90deg, #667eea, #764ba2)',
            WebkitBackgroundClip: 'text',
            WebkitTextFillColor: 'transparent',
            fontWeight: '700'
          }}>
            üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
          </h3>
          <div style={{ display: 'grid', gap: '1.5rem' }}>
            {Object.entries(testResults.competencyResults)
              .sort(([,a], [,b]) => b.score - a.score)
              .map(([competency, data], index) => (
                <div
                  key={competency}
                  style={{
                    background: 'linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(139, 92, 246, 0.1))',
                    padding: '1.5rem',
                    borderRadius: '16px',
                    border: '1px solid rgba(59, 130, 246, 0.3)',
                    position: 'relative',
                    overflow: 'hidden'
                  }}
                >
                  {index < 3 && (
                    <div style={{
                      position: 'absolute',
                      top: '10px',
                      right: '10px',
                      background: index === 0 ? '#f59e0b' : index === 1 ? '#6b7280' : '#10b981',
                      color: 'white',
                      padding: '0.3rem 0.8rem',
                      borderRadius: '20px',
                      fontSize: '0.8rem',
                      fontWeight: 'bold'
                    }}>
                      {index === 0 ? 'ü•á –õ—É—á—à–∏–π' : index === 1 ? 'ü•à –í—Ç–æ—Ä–æ–π' : 'ü•â –¢—Ä–µ—Ç–∏–π'}
                    </div>
                  )}
                  
                  <div style={{ 
                    display: 'flex', 
                    justifyContent: 'space-between', 
                    alignItems: 'center',
                    marginBottom: '1.5rem'
                  }}>
                    <div style={{ flex: 1 }}>
                      <h4 style={{ 
                        color: 'white', 
                        fontSize: '1.3rem', 
                        margin: '0 0 0.5rem 0',
                        fontWeight: '600'
                      }}>
                        {availableCompetencies.find(c => c.id === competency)?.name || competency}
                      </h4>
                      <p style={{ 
                        color: 'rgba(255, 255, 255, 0.7)', 
                        fontSize: '0.9rem',
                        margin: 0
                      }}>
                        {availableCompetencies.find(c => c.id === competency)?.description}
                      </p>
                    </div>
                    <div style={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      gap: '1rem',
                      flexShrink: 0
                    }}>
                      <span style={{
                        background: data.level === '–≠–∫—Å–ø–µ—Ä—Ç' ? 'linear-gradient(135deg, #10b981, #34d399)' :
                                   data.level === '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π' ? 'linear-gradient(135deg, #3b82f6, #0ea5e9)' :
                                   data.level === '–°—Ä–µ–¥–Ω–∏–π' ? 'linear-gradient(135deg, #f59e0b, #fbbf24)' : 'linear-gradient(135deg, #6b7280, #9ca3af)',
                        color: 'white',
                        padding: '0.6rem 1.2rem',
                        borderRadius: '25px',
                        fontSize: '0.85rem',
                        fontWeight: '700',
                        minWidth: '120px',
                        textAlign: 'center'
                      }}>
                        {data.level}
                      </span>
                      <div style={{
                        textAlign: 'center'
                      }}>
                        <div style={{
                          fontSize: '2rem',
                          fontWeight: 'bold',
                          background: data.score >= 80 ? 'linear-gradient(135deg, #10b981, #34d399)' :
                                     data.score >= 60 ? 'linear-gradient(135deg, #3b82f6, #0ea5e9)' :
                                     data.score >= 40 ? 'linear-gradient(135deg, #f59e0b, #fbbf24)' : 'linear-gradient(135deg, #ef4444, #f87171)',
                          WebkitBackgroundClip: 'text',
                          WebkitTextFillColor: 'transparent',
                          lineHeight: 1
                        }}>
                          {data.score}
                        </div>
                        <div style={{
                          fontSize: '0.8rem',
                          color: 'rgba(255, 255, 255, 0.6)',
                          marginTop: '0.2rem'
                        }}>
                          –∏–∑ 100
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div style={{ marginBottom: '1.2rem' }}>
                    <div style={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center',
                      color: 'rgba(255, 255, 255, 0.8)',
                      fontSize: '0.9rem',
                      marginBottom: '0.8rem'
                    }}>
                      <span>–ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Å–≤–æ–µ–Ω–∏—è</span>
                      <span style={{ 
                        fontWeight: '600',
                        color: data.score >= 80 ? '#10b981' : 
                               data.score >= 60 ? '#3b82f6' :
                               data.score >= 40 ? '#f59e0b' : '#ef4444'
                      }}>
                        {data.score}%
                      </span>
                    </div>
                    <div style={{
                      width: '100%',
                      height: '12px',
                      background: 'rgba(255, 255, 255, 0.1)',
                      borderRadius: '10px',
                      overflow: 'hidden',
                      boxShadow: 'inset 0 2px 4px rgba(0,0,0,0.2)'
                    }}>
                      <div style={{
                        width: `${data.score}%`,
                        height: '100%',
                        background: data.score >= 80 ? 'linear-gradient(90deg, #10b981, #34d399)' :
                                   data.score >= 60 ? 'linear-gradient(90deg, #3b82f6, #0ea5e9)' :
                                   data.score >= 40 ? 'linear-gradient(90deg, #f59e0b, #fbbf24)' : 'linear-gradient(90deg, #ef4444, #f87171)',
                        borderRadius: '10px',
                        transition: 'width 1.5s ease-in-out',
                        boxShadow: '0 2px 8px rgba(16, 185, 129, 0.3)'
                      }}></div>
                    </div>
                  </div>

                  <div style={{
                    display: 'grid',
                    gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',
                    gap: '1rem',
                    color: 'rgba(255, 255, 255, 0.7)',
                    fontSize: '0.85rem'
                  }}>
                    <div style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '0.5rem',
                      background: 'rgba(255, 255, 255, 0.05)',
                      padding: '0.6rem',
                      borderRadius: '8px'
                    }}>
                      <span style={{ fontSize: '1.1rem' }}>üìù</span>
                      <div>
                        <div style={{ fontWeight: '600' }}>–í–æ–ø—Ä–æ—Å–æ–≤</div>
                        <div>{data.questionsAsked}</div>
                      </div>
                    </div>
                    <div style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '0.5rem',
                      background: 'rgba(255, 255, 255, 0.05)',
                      padding: '0.6rem',
                      borderRadius: '8px'
                    }}>
                      <span style={{ fontSize: '1.1rem' }}>‚úÖ</span>
                      <div>
                        <div style={{ fontWeight: '600' }}>–ü—Ä–∞–≤–∏–ª—å–Ω–æ</div>
                        <div>{data.correctAnswers}</div>
                      </div>
                    </div>
                    <div style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '0.5rem',
                      background: 'rgba(255, 255, 255, 0.05)',
                      padding: '0.6rem',
                      borderRadius: '8px'
                    }}>
                      <span style={{ fontSize: '1.1rem' }}>‚ö°</span>
                      <div>
                        <div style={{ fontWeight: '600' }}>–°–ª–æ–∂–Ω–æ—Å—Ç—å</div>
                        <div>
                          {data.finalDifficulty === 'expert' ? '–≠–∫—Å–ø–µ—Ä—Ç' :
                           data.finalDifficulty === 'intermediate' ? '–°—Ä–µ–¥–Ω–∏–π' : '–ù–∞—á–∞–ª—å–Ω—ã–π'}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
          </div>
        </div>

        <div className="result-card" style={{ 
          marginBottom: '2rem', 
          textAlign: 'left',
          background: 'linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(59, 130, 246, 0.1))',
          border: '1px solid rgba(16, 185, 129, 0.3)'
        }}>
          <h3 style={{ 
            color: 'white', 
            marginBottom: '1.5rem', 
            fontSize: '1.6rem',
            textAlign: 'center'
          }}>
            üí° {userRole === '–°—Ç—É–¥–µ–Ω—Ç' ? '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è' : '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è'}
          </h3>
          <div style={{ color: 'rgba(255, 255, 255, 0.9)', lineHeight: '1.7' }}>
            {testResults.overallScore >= 80 ? (
              <div style={{ textAlign: 'center', marginBottom: '1.5rem' }}>
                <div style={{ fontSize: '2rem', marginBottom: '0.5rem' }}>üéâ</div>
                <p style={{ fontSize: '1.2rem', fontWeight: '600', marginBottom: '1rem' }}>
                  –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!
                </p>
                <p>
                  {userRole === '–°—Ç—É–¥–µ–Ω—Ç' 
                    ? '–í—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ –¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏.'
                    : '–í–∞—à–∏ –∑–Ω–∞–Ω–∏—è –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —É–≥–ª—É–±–ª–µ–Ω–Ω—ã—Ö —É—á–µ–±–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –∏ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞.'
                  }
                </p>
              </div>
            ) : testResults.overallScore >= 60 ? (
              <div style={{ textAlign: 'center', marginBottom: '1.5rem' }}>
                <div style={{ fontSize: '2rem', marginBottom: '0.5rem' }}>‚≠ê</div>
                <p style={{ fontSize: '1.2rem', fontWeight: '600', marginBottom: '1rem' }}>
                  –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!
                </p>
                <p>
                  {userRole === '–°—Ç—É–¥–µ–Ω—Ç'
                    ? '–£ –≤–∞—Å –ø—Ä–æ—á–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π. –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.'
                    : '–í—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ solid –∑–Ω–∞–Ω–∏—è–º–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–Ω–µ–¥—Ä—è—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–µ–π—Å—ã –≤ —É—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å.'
                  }
                </p>
              </div>
            ) : testResults.overallScore >= 40 ? (
              <div style={{ textAlign: 'center', marginBottom: '1.5rem' }}>
                <div style={{ fontSize: '2rem', marginBottom: '0.5rem' }}>üìö</div>
                <p style={{ fontSize: '1.2rem', fontWeight: '600', marginBottom: '1rem' }}>
                  –°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                </p>
                <p>
                  {userRole === '–°—Ç—É–¥–µ–Ω—Ç'
                    ? '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —É—á–µ–±–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.'
                    : '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –≤–∫–ª—é—á–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π.'
                  }
                </p>
              </div>
            ) : (
              <div style={{ textAlign: 'center', marginBottom: '1.5rem' }}>
                <div style={{ fontSize: '2rem', marginBottom: '0.5rem' }}>üå±</div>
                <p style={{ fontSize: '1.2rem', fontWeight: '600', marginBottom: '1rem' }}>
                  –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
                </p>
                <p>
                  {userRole === '–°—Ç—É–¥–µ–Ω—Ç'
                    ? '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—á–∞—Ç—å —Å –±–∞–∑–æ–≤—ã—Ö –∫—É—Ä—Å–æ–≤ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –Ω–∞—Ä–∞—â–∏–≤–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å. –ù–µ –±–æ–π—Ç–µ—Å—å challenging –∑–∞–¥–∞—á!'
                    : '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –∏ –æ–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.'
                  }
                </p>
              </div>
            )}
            
            <div style={{ 
              background: 'rgba(255, 255, 255, 0.05)', 
              padding: '1.5rem', 
              borderRadius: '12px',
              marginTop: '1.5rem'
            }}>
              <h4 style={{ color: 'white', marginBottom: '1rem', fontSize: '1.1rem' }}>
                üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:
              </h4>
              <div style={{ display: 'grid', gap: '0.8rem' }}>
                {Object.entries(testResults.competencyResults)
                  .filter(([, data]) => data.score < 70)
                  .sort(([,a], [,b]) => a.score - b.score)
                  .slice(0, 3)
                  .map(([comp, data]) => (
                    <div key={comp} style={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center',
                      padding: '0.8rem',
                      background: 'rgba(239, 68, 68, 0.1)',
                      borderRadius: '8px',
                      border: '1px solid rgba(239, 68, 68, 0.3)'
                    }}>
                      <div>
                        <div style={{ fontWeight: '600', color: 'white', fontSize: '0.9rem' }}>
                          {availableCompetencies.find(c => c.id === comp)?.name}
                        </div>
                        <div style={{ fontSize: '0.8rem', color: 'rgba(255, 255, 255, 0.7)' }}>
                          {data.recommendation}
                        </div>
                      </div>
                      <div style={{
                        background: 'rgba(239, 68, 68, 0.3)',
                        color: 'white',
                        padding: '0.4rem 0.8rem',
                        borderRadius: '20px',
                        fontSize: '0.8rem',
                        fontWeight: 'bold'
                      }}>
                        {data.score}/100
                      </div>
                    </div>
                  ))}
              </div>
            </div>
          </div>
        </div>

        <div className="results-actions">
          <button className="primary-btn" onClick={() => {
            adaptiveTestingService.reset();
            setShowResults(false);
            setProfileStep(0);
            setUserName('');
            setUserRole('');
            setSelectedCompetencies([]);
            setCurrentQuestion(null);
          }}>
            üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ
          </button>
          <button className="secondary-btn" onClick={onBack}>
            üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    </div>
  );
}

  // –≠–∫—Ä–∞–Ω 5: –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
  if (!currentQuestion) {
    return (
      <div className="test-page">
        <div className="animated-background">
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="floating-particles">
            {[...Array(10)].map((_, i) => (
              <div key={i} className="particle"></div>
            ))}
          </div>
        </div>

        <nav className="main-nav">
          <div className="nav-brand" onClick={onBack} style={{ cursor: 'pointer' }}>
            <span className="gradient-text">Poly</span>Skills
          </div>
        </nav>

        <div className="test-container">
          <div className="question-card" style={{ textAlign: 'center' }}>
            <h2 className="question-text">–ü–æ–¥–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã...</h2>
            <p style={{ color: 'rgba(255, 255, 255, 0.7)', fontSize: '1.2rem', marginTop: '2rem' }}>
              ü§ñ –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –≤ {selectedCompetencies.length} –æ–±–ª–∞—Å—Ç—è—Ö
            </p>
            <div style={{ marginTop: '2rem' }}>
              <div style={{ 
                display: 'flex', 
                flexWrap: 'wrap', 
                gap: '0.5rem', 
                justifyContent: 'center' 
              }}>
                {selectedCompetencies.map(compId => {
                  const comp = availableCompetencies.find(c => c.id === compId);
                  return comp ? (
                    <span key={compId} style={{
                      background: 'rgba(59, 130, 246, 0.2)',
                      color: 'white',
                      padding: '0.5rem 1rem',
                      borderRadius: '20px',
                      fontSize: '0.9rem'
                    }}>
                      {comp.name}
                    </span>
                  ) : null;
                })}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // –≠–∫—Ä–∞–Ω 6: –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  return (
    <div className="test-page">
      <div className="animated-background">
        <div className="wave"></div>
        <div className="wave"></div>
        <div className="wave"></div>
        <div className="floating-particles">
          {[...Array(10)].map((_, i) => (
            <div key={i} className="particle"></div>
          ))}
        </div>
      </div>

      <nav className="main-nav">
        <div className="nav-brand" onClick={onBack} style={{ cursor: 'pointer' }}>
          <span className="gradient-text">Poly</span>Skills
        </div>
        <button className="mobile-menu-btn" onClick={toggleMenu}>
          {isMenuOpen ? '‚úï' : '‚ò∞'}
        </button>
        <div className={`nav-links ${isMenuOpen ? 'active' : ''}`}>
          <a href="#stats" onClick={() => setIsMenuOpen(false)}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
          <a href="#courses" onClick={() => setIsMenuOpen(false)}>–ö—É—Ä—Å—ã</a>
          <a href="#login" className="login-btn" onClick={() => setIsMenuOpen(false)}>–í–æ–π—Ç–∏</a>
        </div>
      </nav>

      <div className="test-container">
        <div className="test-header">
          <button className="back-to-home" onClick={onBack}>
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
          <div className="progress-info">
            <span className="question-counter">
              –í–æ–ø—Ä–æ—Å {progress.current} –∏–∑ {progress.total}
            </span>
            <span className="category-badge">
              {availableCompetencies.find(c => c.id === currentQuestion.competency)?.name} ‚Ä¢ {
                currentQuestion.difficulty === 'expert' ? 'üî• –≠–∫—Å–ø–µ—Ä—Ç' :
                currentQuestion.difficulty === 'intermediate' ? '‚ö° –°—Ä–µ–¥–Ω–∏–π' : 'üå± –ù–∞—á–∞–ª—å–Ω—ã–π'
              }
            </span>
          </div>
          <div className="progress-bar">
            <div className="progress-fill" style={{ width: `${progress.percentage}%` }}></div>
          </div>
        </div>

        <div className="question-card">
          <h2 className="question-text">{currentQuestion.question}</h2>

          {showFeedback && feedbackData && (
            <div style={{
              background: feedbackData.isCorrect 
                ? 'rgba(16, 185, 129, 0.2)' 
                : 'rgba(239, 68, 68, 0.2)',
              border: `2px solid ${feedbackData.isCorrect ? '#10b981' : '#ef4444'}`,
              borderRadius: '12px',
              padding: '1.5rem',
              marginBottom: '2rem',
              animation: 'cardAppear 0.3s ease-out'
            }}>
              <div style={{ 
                color: 'white', 
                fontSize: '1.2rem', 
                fontWeight: '600',
                marginBottom: '0.5rem'
              }}>
                {feedbackData.feedback}
              </div>
              {!feedbackData.isCorrect && feedbackData.correctAnswer && (
                <div style={{ color: 'rgba(255, 255, 255, 0.8)', fontSize: '1rem' }}>
                  –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {feedbackData.correctAnswer}
                </div>
              )}
            </div>
          )}

          <div className="answer-section">
            {currentQuestion.type === 'rating' && (
              <div className="rating-container">
                {[1, 2, 3, 4, 5].map((rating) => (
                  <button
                    key={rating}
                    className={`rating-btn ${userAnswer === rating ? 'active' : ''}`}
                    onClick={() => setUserAnswer(rating)}
                    disabled={showFeedback}
                  >
                    <span className="rating-number">{rating}</span>
                    <span className="rating-label">
                      {rating === 1 && '–ù–æ–≤–∏—á–æ–∫'}
                      {rating === 2 && '–ë–∞–∑–æ–≤—ã–π'}
                      {rating === 3 && '–°—Ä–µ–¥–Ω–∏–π'}
                      {rating === 4 && '–•–æ—Ä–æ—à–∏–π'}
                      {rating === 5 && '–û—Ç–ª–∏—á–Ω—ã–π'}
                    </span>
                  </button>
                ))}
              </div>
            )}

            {currentQuestion.type === 'multiple' && currentQuestion.options && (
              <div className="multiple-container">
                {currentQuestion.options.map((option) => (
                  <button
                    key={option}
                    className={`option-btn ${userAnswer === option ? 'active' : ''}`}
                    onClick={() => setUserAnswer(option)}
                    disabled={showFeedback}
                  >
                    <span className="option-check">‚úì</span>
                    {option}
                  </button>
                ))}
              </div>
            )}

            {currentQuestion.type === 'text' && (
              <div className="text-container">
                <textarea
                  className="text-input"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç..."
                  value={userAnswer || ''}
                  onChange={(e) => setUserAnswer(e.target.value)}
                  rows={6}
                  disabled={showFeedback}
                />
                {currentQuestion.hint && (
                  <div className="text-hint">
                    üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {currentQuestion.hint}
                  </div>
                )}
                <div className="text-hint">
                  –ú–∏–Ω–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∑–∞—Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                </div>
              </div>
            )}
          </div>

          {!showFeedback && (
            <div className="navigation-buttons">
              <button
                className="nav-btn secondary"
                onClick={handleSkip}
              >
                –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
              </button>
              <button
                className="nav-btn primary"
                onClick={handleAnswerSubmit}
                disabled={!userAnswer || (
                  currentQuestion.type === 'text' && 
                  userAnswer && 
                  userAnswer.trim().length < 30
                )}
              >
                –û—Ç–≤–µ—Ç–∏—Ç—å ‚Üí
              </button>
            </div>
          )}

          {showFeedback && (
            <div style={{ textAlign: 'center', color: 'rgba(255, 255, 255, 0.7)' }}>
              –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É...
            </div>
          )}
        </div>

        <div className="test-footer">
          <p className="footer-text">
            üß† –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
          </p>
        </div>
      </div>
    </div>
  );
}

export default AdaptiveTestPage;