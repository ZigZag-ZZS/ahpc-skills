// src/components/AdaptiveTestPage.js
import React, { useState, useEffect } from 'react';
import './TestPage.css';
import adaptiveTestingService from '../services/adaptiveTestingService';
import apiService from '../services/apiService';
import courseRecommendationService from '../services/courseRecommendationService';

function AdaptiveTestPage({ onBack }) {
  const [currentQuestion, setCurrentQuestion] = useState(null);
  const [userAnswer, setUserAnswer] = useState(null);
  const [showResults, setShowResults] = useState(false);
  const [showFeedback, setShowFeedback] = useState(false);
  const [feedbackData, setFeedbackData] = useState(null);
  const [testResults, setTestResults] = useState(null);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [testId, setTestId] = useState(null);
  const [userName, setUserName] = useState('');
  const [userRole, setUserRole] = useState('');
  const [selectedCompetencies, setSelectedCompetencies] = useState([]);
  const [profileStep, setProfileStep] = useState(0);
  const [courseRecommendations, setCourseRecommendations] = useState([]);

  const availableCompetencies = [
    { id: 'graphic_design', name: 'üé® –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω', description: '–†–∞–±–æ—Ç–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, UI/UX –¥–∏–∑–∞–π–Ω' },
    { id: 'system_admin', name: '‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤, —Å–µ—Ç–∏, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å' },
    { id: 'web_dev', name: 'üåê –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', description: 'Frontend –∏ Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞' },
    { id: 'mobile_dev', name: 'üì± –ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', description: 'iOS, Android, –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' },
    { id: 'data_science', name: 'üìä Data Science', description: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, ML, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è' },
    { id: 'devops', name: 'üîß DevOps', description: 'CI/CD, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è' },
    { id: 'project_management', name: 'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏', description: 'Agile, Scrum, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ' },
    { id: 'cybersecurity', name: 'üõ°Ô∏è –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', description: '–ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥' },
    { id: 'cloud_computing', name: '‚òÅÔ∏è –û–±–ª–∞—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', description: 'AWS, Azure, Google Cloud' },
    { id: 'programming', name: 'üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', description: '–ê–ª–≥–æ—Ä–∏—Ç–º—ã, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö' }
  ];

  useEffect(() => {
    const newTestId = apiService.generateTestId();
    setTestId(newTestId);
    adaptiveTestingService.reset();
  }, []);

  const startTest = () => {
    if (profileStep === 0 && userName.trim()) {
      setProfileStep(1);
    } else if (profileStep === 1 && userRole) {
      setProfileStep(2);
    } else if (profileStep === 2 && selectedCompetencies.length > 0) {
      setProfileStep(3);
      adaptiveTestingService.setSelectedCompetencies(selectedCompetencies);
      loadNextQuestion();
    }
  };

  const toggleCompetency = (competencyId) => {
    setSelectedCompetencies(prev => 
      prev.includes(competencyId) 
        ? prev.filter(id => id !== competencyId)
        : [...prev, competencyId]
    );
  };

  const loadNextQuestion = () => {
    const nextQuestion = adaptiveTestingService.getNextQuestion();
    
    if (nextQuestion) {
      setCurrentQuestion(nextQuestion);
      setUserAnswer(null);
      setShowFeedback(false);
    } else {
      finishTest();
    }
  };

  const handleAnswerSubmit = () => {
    if (!userAnswer) return;

    const result = adaptiveTestingService.processAnswer(
      currentQuestion.id,
      userAnswer
    );

    setFeedbackData(result);
    setShowFeedback(true);

    setTimeout(() => {
      loadNextQuestion();
    }, 2000);
  };

  const finishTest = async () => {
  const results = adaptiveTestingService.getFinalResults();
  setTestResults(results);
  
  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤
  const recommendations = courseRecommendationService.getRecommendations(
    results,
    userRole,
    6
  );
  setCourseRecommendations(recommendations);
  
  try {
    await apiService.saveTestResults({
      full_name: userName,
      user_type: userRole,
      test_id: testId,
      selected_competencies: selectedCompetencies,
      test_score: {
        overallScore: results.overallScore,
        totalQuestions: results.totalQuestions,
        correctAnswers: results.correctAnswers,
        competencyResults: results.competencyResults,
        testType: 'adaptive',
        completedAt: new Date().toISOString()
      }
    });
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
  }
  
  setShowResults(true);
};


  const handleSkip = () => {
    adaptiveTestingService.processAnswer(currentQuestion.id, '');
    loadNextQuestion();
  };

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  const progress = adaptiveTestingService.getProgress();

  // –≠–∫—Ä–∞–Ω 1: –í–≤–æ–¥ –∏–º–µ–Ω–∏
  if (profileStep === 0) {
    return (
      <div className="test-page">
        <div className="animated-background">
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="floating-particles">
            {[...Array(10)].map((_, i) => (
              <div key={i} className="particle"></div>
            ))}
          </div>
        </div>

        <nav className="main-nav">
          <div className="nav-brand clickable" onClick={onBack}>
            <span className="gradient-text">Poly</span>Skills
          </div>
        </nav>

        <div className="test-container">
          <div className="question-card welcome-card">
            <h2 className="question-text welcome-title">
              üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!
            </h2>
            <p className="welcome-subtitle">
              –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∏—Ç –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –ø–æ 100-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ –∏ –ø–æ–¥–±–µ—Ä–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∑–Ω–∞–Ω–∏–π
            </p>
            
            <div className="input-group">
              <label className="input-label">
                –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?
              </label>
              <input
                type="text"
                className="text-input"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                value={userName}
                onChange={(e) => setUserName(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && userName.trim() && startTest()}
              />
              <div className="text-hint">
                üí° –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
              </div>
            </div>

            <button
              className="nav-btn primary full-width-btn"
              onClick={startTest}
              disabled={!userName.trim()}
            >
              –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Üí
            </button>
          </div>
        </div>
      </div>
    );
  }

  // –≠–∫—Ä–∞–Ω 2: –í—ã–±–æ—Ä —Ä–æ–ª–∏
  if (profileStep === 1) {
    return (
      <div className="test-page">
        <div className="animated-background">
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="floating-particles">
            {[...Array(10)].map((_, i) => (
              <div key={i} className="particle"></div>
            ))}
          </div>
        </div>

        <nav className="main-nav">
          <div className="nav-brand clickable" onClick={onBack}>
            <span className="gradient-text">Poly</span>Skills
          </div>
        </nav>

        <div className="test-container">
          <div className="question-card welcome-card">
            <h2 className="question-text welcome-title">
              –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {userName}! üëã
            </h2>
            <p className="welcome-subtitle">
              –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            </p>

            <div className="role-grid">
              <button
                className={`option-btn role-option ${userRole === '–°—Ç—É–¥–µ–Ω—Ç' ? 'active' : ''}`}
                onClick={() => setUserRole('–°—Ç—É–¥–µ–Ω—Ç')}
              >
                <span className="option-check">‚úì</span>
                <div>
                  <div className="role-title">
                    üéì –°—Ç—É–¥–µ–Ω—Ç
                  </div>
                  <div className="role-description">
                    –Ø —É—á—É—Å—å –∏ —Ö–æ—á—É –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏
                  </div>
                </div>
              </button>

              <button
                className={`option-btn role-option ${userRole === '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å' ? 'active' : ''}`}
                onClick={() => setUserRole('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')}
              >
                <span className="option-check">‚úì</span>
                <div>
                  <div className="role-title">
                    üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
                  </div>
                  <div className="role-description">
                    –Ø –ø—Ä–µ–ø–æ–¥–∞—é –∏ —Ö–æ—á—É –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è
                  </div>
                </div>
              </button>
            </div>

            <div className="button-row">
              <button
                className="nav-btn secondary flex-1"
                onClick={() => setProfileStep(0)}
              >
                ‚Üê –ù–∞–∑–∞–¥
              </button>
              <button
                className="nav-btn primary flex-2"
                onClick={startTest}
                disabled={!userRole}
              >
                –î–∞–ª–µ–µ ‚Üí
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // –≠–∫—Ä–∞–Ω 3: –í—ã–±–æ—Ä –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
  if (profileStep === 2) {
    return (
      <div className="test-page">
        <div className="animated-background">
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="floating-particles">
            {[...Array(10)].map((_, i) => (
              <div key={i} className="particle"></div>
            ))}
          </div>
        </div>

        <nav className="main-nav">
          <div className="nav-brand clickable" onClick={onBack}>
            <span className="gradient-text">Poly</span>Skills
          </div>
        </nav>

        <div className="test-container">
          <div className="question-card competency-card">
            <h2 className="question-text">
              üéØ –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            </h2>
            <p className="welcome-subtitle">
              –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ 2-5 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
            </p>

            <div className="competency-grid">
              {availableCompetencies.map(comp => (
                <button
                  key={comp.id}
                  className={`option-btn competency-option ${selectedCompetencies.includes(comp.id) ? 'active' : ''}`}
                  onClick={() => toggleCompetency(comp.id)}
                >
                  <span className="option-check">‚úì</span>
                  <div>
                    <div className="competency-name">
                      {comp.name}
                    </div>
                    <div className="competency-description">
                      {comp.description}
                    </div>
                  </div>
                </button>
              ))}
            </div>

            <div className="info-box">
              <div className="info-title">
                <strong>‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</strong>
              </div>
              <ul className="info-list">
                <li>–ù–∞—á–∏–Ω–∞–µ—Ç —Å–æ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</li>
                <li>–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤</li>
                <li>–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞–∂–¥—É—é –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é –ø–æ 100-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ</li>
                <li>–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –æ—Ç –ù–æ–≤–∏—á–∫–∞ –¥–æ –≠–∫—Å–ø–µ—Ä—Ç–∞</li>
              </ul>
            </div>

            <div className="button-row">
              <button
                className="nav-btn secondary flex-1"
                onClick={() => setProfileStep(1)}
              >
                ‚Üê –ù–∞–∑–∞–¥
              </button>
              <button
                className="nav-btn primary flex-2"
                onClick={startTest}
                disabled={selectedCompetencies.length === 0}
              >
                –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üöÄ
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // –≠–∫—Ä–∞–Ω 4: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  if (showResults && testResults) {
    return (
      <div className="test-page">
        <div className="animated-background">
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="floating-particles">
            {[...Array(10)].map((_, i) => (
              <div key={i} className="particle"></div>
            ))}
          </div>
        </div>

        <nav className="main-nav">
          <div className="nav-brand clickable" onClick={onBack}>
            <span className="gradient-text">Poly</span>Skills
          </div>
          <button className="mobile-menu-btn" onClick={toggleMenu}>
            {isMenuOpen ? '‚úï' : '‚ò∞'}
          </button>
          <div className={`nav-links ${isMenuOpen ? 'active' : ''}`}>
            <a href="#stats" onClick={() => setIsMenuOpen(false)}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
            <a href="#courses" onClick={() => setIsMenuOpen(false)}>–ö—É—Ä—Å—ã</a>
            <a href="#login" className="login-btn" onClick={() => setIsMenuOpen(false)}>–í–æ–π—Ç–∏</a>
          </div>
        </nav>

        <div className="results-container">
          <div className="results-header">
            <div className="success-icon">üéì</div>
            <h1>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {userName}!</h1>
            <p>–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã</p>
            <div className="user-role-badge">
              {userRole === '–°—Ç—É–¥–µ–Ω—Ç' ? 'üéí –°—Ç—É–¥–µ–Ω—Ç' : 'üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'} ‚Ä¢ {selectedCompetencies.length} –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
            </div>
          </div>

          <div className="results-stats">
            <div className="result-card">
              <div className="result-icon">üìä</div>
              <h3>–û–±—â–∏–π –±–∞–ª–ª</h3>
              <div className="result-value">
                {testResults.overallScore}
                <span>/100</span>
              </div>
              <div className="score-circle" style={{
                background: `conic-gradient(#10b981 ${testResults.overallScore * 3.6}deg, rgba(255,255,255,0.1) 0deg)`
              }}>
                <div className="score-circle-inner">
                  {Math.round(testResults.overallScore)}%
                </div>
              </div>
              <p>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –≤—Å–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º</p>
            </div>

            <div className="result-card">
              <div className="result-icon">‚úÖ</div>
              <h3>–¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤</h3>
              <div className="result-value">
                {Math.round((testResults.correctAnswers / testResults.totalQuestions) * 100)}%
              </div>
              <div className="result-stat-flex">
                <span className="result-stat-number">
                  {testResults.correctAnswers}
                </span>
                <span className="result-stat-separator">–∏–∑</span>
                <span className="result-stat-number">
                  {testResults.totalQuestions}
                </span>
              </div>
              <p>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</p>
            </div>

            <div className="result-card">
              <div className="result-icon">üéØ</div>
              <h3>–û—Ü–µ–Ω–µ–Ω–æ –Ω–∞–≤—ã–∫–æ–≤</h3>
              <div className="result-value">
                {Object.keys(testResults.competencyResults).length}
              </div>
              <div className="competency-tags">
                {selectedCompetencies.slice(0, 4).map(compId => {
                  const comp = availableCompetencies.find(c => c.id === compId);
                  return comp ? (
                    <span key={compId} className="competency-tag">
                      {comp.name.split(' ')[0]}
                    </span>
                  ) : null;
                })}
                {selectedCompetencies.length > 4 && (
                  <span className="competency-tag-more">
                    +{selectedCompetencies.length - 4}
                  </span>
                )}
              </div>
              <p>–û–±–ª–∞—Å—Ç–µ–π –∑–Ω–∞–Ω–∏–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ</p>
            </div>
          </div>

          <div className="detailed-results-section">
            <h3 className="section-title">
              –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
            </h3>
            <div className="competency-details-grid">
              {Object.entries(testResults.competencyResults)
                .sort(([,a], [,b]) => b.score - a.score)
                .map(([competency, data], index) => (
                  <div key={competency} className="competency-detail-card">

                    
                    <div className="competency-header">
                      <div className="competency-info">
                        <h4 className="competency-title">
                          {availableCompetencies.find(c => c.id === competency)?.name || competency}
                        </h4>
                        <p className="competency-subtitle">
                          {availableCompetencies.find(c => c.id === competency)?.description}
                        </p>
                      </div>
                      <div className="competency-metrics">
                        <span className={`level-badge ${
                          data.level === '–≠–∫—Å–ø–µ—Ä—Ç' ? 'expert' :
                          data.level === '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π' ? 'advanced' :
                          data.level === '–°—Ä–µ–¥–Ω–∏–π' ? 'intermediate' : 'beginner'
                        }`}>
                          {data.level}
                        </span>
                        <div className="score-display">
                          <div className={`score-number ${
                            data.score >= 80 ? 'high' :
                            data.score >= 60 ? 'medium' :
                            data.score >= 40 ? 'low' : 'very-low'
                          }`}>
                            {data.score}
                          </div>
                          <div className="score-label">
                            –∏–∑ 100
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="progress-section">
                      <div className="progress-header">
                        <span>–ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Å–≤–æ–µ–Ω–∏—è</span>
                        <span className={`progress-percentage ${
                          data.score >= 80 ? 'high' :
                          data.score >= 60 ? 'medium' :
                          data.score >= 40 ? 'low' : 'very-low'
                        }`}>
                          {data.score}%
                        </span>
                      </div>
                      <div className="progress-bar-container">
                        <div className={`progress-bar-fill ${
                          data.score >= 80 ? 'high' :
                          data.score >= 60 ? 'medium' :
                          data.score >= 40 ? 'low' : 'very-low'
                        }`} style={{ width: `${data.score}%` }}></div>
                      </div>
                    </div>

                    <div className="stats-grid">
                      <div className="stat-item">
                        <span className="stat-icon">üìù</span>
                        <div className="stat-content">
                          <span className="stat-label">–í–æ–ø—Ä–æ—Å–æ–≤</span>
                          <div className="stat-value">{data.questionsAsked}</div>
                        </div>
                      </div>
                      <div className="stat-item">
                        <span className="stat-icon">‚úÖ</span>
                        <div className="stat-content">
                          <span className="stat-label">–ü—Ä–∞–≤–∏–ª—å–Ω–æ</span>
                          <div className="stat-value">{data.correctAnswers}</div>
                        </div>
                      </div>
                      <div className="stat-item">
                        <span className="stat-icon">‚ö°</span>
                        <div className="stat-content">
                          <span className="stat-label">–°–ª–æ–∂–Ω–æ—Å—Ç—å</span>
                          <div className="stat-value">
                            {data.finalDifficulty === 'expert' ? '–≠–∫—Å–ø–µ—Ä—Ç' :
                             data.finalDifficulty === 'intermediate' ? '–°—Ä–µ–¥–Ω–∏–π' : '–ù–∞—á–∞–ª—å–Ω—ã–π'}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
            </div>
          </div>



<div className="courses-recommendations-section">
  <h3 className="section-title">
     –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫—É—Ä—Å—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
  </h3>
  <p className="courses-intro">
    –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –∫—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —É–ª—É—á—à–∏—Ç—å –Ω–∞–≤—ã–∫–∏ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö
  </p>

  {courseRecommendations.length > 0 ? (
    <div className="courses-grid">
      {courseRecommendations.map((recommendation, index) => (
        <div key={recommendation.competency} className="course-recommendation-block">
          <div className="course-block-header">
            <div className="course-competency-info">
              <h4 className="course-competency-name">
                {availableCompetencies.find(c => c.id === recommendation.competency)?.name}
              </h4>
              <div className="course-score-indicator">
                <span className="score-label">–í–∞—à —É—Ä–æ–≤–µ–Ω—å:</span>
                <span className={`score-badge ${
                  recommendation.score >= 70 ? 'high' :
                  recommendation.score >= 40 ? 'medium' : 'low'
                }`}>
                  {recommendation.score}/100
                </span>
              </div>
            </div>
            <span className={`priority-indicator ${
              index === 0 ? 'high' : index === 1 ? 'medium' : 'normal'
            }`}>
              {index === 0 ? 'üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç' : index === 1 ? '‚≠ê –í–∞–∂–Ω–æ' : 'üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º'}
            </span>
          </div>

          {recommendation.courses.length > 0 ? (
            <div className="courses-list">
              {recommendation.courses.slice(0, 2).map((course, courseIndex) => (
                <div key={courseIndex} className="course-card-compact">
                  <div className="course-card-content">
                    <h5 className="course-title">{course.title}</h5>
                    <p className="course-description">
                      {course.description?.substring(0, 120)}...
                    </p>
                    <div className="course-reason">
                      <span className="reason-icon">üí°</span>
                      <span className="reason-text">{course.recommendationReason}</span>
                    </div>
                  </div>
                  <a 
                    href={course.link} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="course-link-btn"
                  >
                    –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å—É ‚Üí
                  </a>
                </div>
              ))}
            </div>
          ) : (
            <div className="no-courses-message">
              <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫—É—Ä—Å—ã –ø–æ —ç—Ç–æ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
            </div>
          )}
        </div>
      ))}
    </div>
  ) : (
    <div className="no-recommendations">
      <p>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>
    </div>
  )}
</div>


          <div className="results-actions">
            <button className="primary-btn" onClick={() => {
              adaptiveTestingService.reset();
              setShowResults(false);
              setProfileStep(0);
              setUserName('');
              setUserRole('');
              setSelectedCompetencies([]);
              setCurrentQuestion(null);
            }}>
              üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ
            </button>
            <button className="secondary-btn" onClick={onBack}>
              üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            </button>
          </div>
        </div>
      </div>
    );
  }

  // –≠–∫—Ä–∞–Ω 5: –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
  if (!currentQuestion) {
    return (
      <div className="test-page">
        <div className="animated-background">
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="wave"></div>
          <div className="floating-particles">
            {[...Array(10)].map((_, i) => (
              <div key={i} className="particle"></div>
            ))}
          </div>
        </div>

        <nav className="main-nav">
          <div className="nav-brand clickable" onClick={onBack}>
            <span className="gradient-text">Poly</span>Skills
          </div>
        </nav>

        <div className="test-container">
          <div className="question-card loading-container">
            <h2 className="question-text">–ü–æ–¥–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã...</h2>
            <p className="loading-text">
              ü§ñ –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –≤ {selectedCompetencies.length} –æ–±–ª–∞—Å—Ç—è—Ö
            </p>
            <div className="competency-badges-container">
              <div className="competency-badges">
                {selectedCompetencies.map(compId => {
                  const comp = availableCompetencies.find(c => c.id === compId);
                  return comp ? (
                    <span key={compId} className="competency-badge">
                      {comp.name}
                    </span>
                  ) : null;
                })}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // –≠–∫—Ä–∞–Ω 6: –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  return (
    <div className="test-page">
      <div className="animated-background">
        <div className="wave"></div>
        <div className="wave"></div>
        <div className="wave"></div>
        <div className="floating-particles">
          {[...Array(10)].map((_, i) => (
            <div key={i} className="particle"></div>
          ))}
        </div>
      </div>

      <nav className="main-nav">
        <div className="nav-brand clickable" onClick={onBack}>
          <span className="gradient-text">Poly</span>Skills
        </div>
        <button className="mobile-menu-btn" onClick={toggleMenu}>
          {isMenuOpen ? '‚úï' : '‚ò∞'}
        </button>
        <div className={`nav-links ${isMenuOpen ? 'active' : ''}`}>
          <a href="#stats" onClick={() => setIsMenuOpen(false)}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
          <a href="#courses" onClick={() => setIsMenuOpen(false)}>–ö—É—Ä—Å—ã</a>
          <a href="#login" className="login-btn" onClick={() => setIsMenuOpen(false)}>–í–æ–π—Ç–∏</a>
        </div>
      </nav>

      <div className="test-container">
        <div className="test-header">
          <button className="back-to-home" onClick={onBack}>
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
          <div className="progress-info">
            <span className="question-counter">
              –í–æ–ø—Ä–æ—Å {progress.current} –∏–∑ {progress.total}
            </span>
            <span className="category-badge">
              {availableCompetencies.find(c => c.id === currentQuestion.competency)?.name} ‚Ä¢ {
                currentQuestion.difficulty === 'expert' ? 'üî• –≠–∫—Å–ø–µ—Ä—Ç' :
                currentQuestion.difficulty === 'intermediate' ? '‚ö° –°—Ä–µ–¥–Ω–∏–π' : 'üå± –ù–∞—á–∞–ª—å–Ω—ã–π'
              }
            </span>
          </div>
          <div className="progress-bar">
            <div className="progress-fill" style={{ width: `${progress.percentage}%` }}></div>
          </div>
        </div>

        <div className="question-card">
          <h2 className="question-text">{currentQuestion.question}</h2>

          {showFeedback && feedbackData && (
            <div className={`feedback-box ${feedbackData.isCorrect ? 'correct' : 'incorrect'}`}>
              <div className="feedback-message">
                {feedbackData.feedback}
              </div>
              {!feedbackData.isCorrect && feedbackData.correctAnswer && (
                <div className="feedback-answer">
                  –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {feedbackData.correctAnswer}
                </div>
              )}
            </div>
          )}

          <div className="answer-section">
            {currentQuestion.type === 'rating' && (
              <div className="rating-container">
                {[1, 2, 3, 4, 5].map((rating) => (
                  <button
                    key={rating}
                    className={`rating-btn ${userAnswer === rating ? 'active' : ''}`}
                    onClick={() => setUserAnswer(rating)}
                    disabled={showFeedback}
                  >
                    <span className="rating-number">{rating}</span>
                    <span className="rating-label">
                      {rating === 1 && '–ù–æ–≤–∏—á–æ–∫'}
                      {rating === 2 && '–ë–∞–∑–æ–≤—ã–π'}
                      {rating === 3 && '–°—Ä–µ–¥–Ω–∏–π'}
                      {rating === 4 && '–•–æ—Ä–æ—à–∏–π'}
                      {rating === 5 && '–û—Ç–ª–∏—á–Ω—ã–π'}
                    </span>
                  </button>
                ))}
              </div>
            )}

            {currentQuestion.type === 'multiple' && currentQuestion.options && (
              <div className="multiple-container">
                {currentQuestion.options.map((option) => (
                  <button
                    key={option}
                    className={`option-btn ${userAnswer === option ? 'active' : ''}`}
                    onClick={() => setUserAnswer(option)}
                    disabled={showFeedback}
                  >
                    <span className="option-check">‚úì</span>
                    {option}
                  </button>
                ))}
              </div>
            )}

            {currentQuestion.type === 'text' && (
              <div className="text-container">
                <textarea
                  className="text-input"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç..."
                  value={userAnswer || ''}
                  onChange={(e) => setUserAnswer(e.target.value)}
                  rows={6}
                  disabled={showFeedback}
                />
                {currentQuestion.hint && (
                  <div className="text-hint">
                    üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {currentQuestion.hint}
                  </div>
                )}
                <div className="text-hint">
                  –ú–∏–Ω–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∑–∞—Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                </div>
              </div>
            )}
          </div>

          {!showFeedback && (
            <div className="navigation-buttons">
              <button
                className="nav-btn secondary"
                onClick={handleSkip}
              >
                –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
              </button>
              <button
                className="nav-btn primary"
                onClick={handleAnswerSubmit}
                disabled={!userAnswer || (
                  currentQuestion.type === 'text' && 
                  userAnswer && 
                  userAnswer.trim().length < 30
                )}
              >
                –û—Ç–≤–µ—Ç–∏—Ç—å ‚Üí
              </button>
            </div>
          )}

          {showFeedback && (
            <div className="transition-message">
              –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É...
            </div>
          )}
        </div>

        <div className="test-footer">
          <p className="footer-text">
            üß† –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
          </p>
        </div>
      </div>
    </div>
  );
}

export default AdaptiveTestPage;